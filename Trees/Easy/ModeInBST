/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
void func(TreeNode *root,unordered_map<int,int>&mp,vector<int>&arr){
    if(root==NULL){
        return;
    }
    mp[root->val]++;
    if(mp[root->val]==1){
        arr.push_back(root->val);
    }
    func(root->left,mp,arr);
    func(root->right,mp,arr);
    return ;
}
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        vector<int>arr;
        if(root==NULL){
            return arr;
        }
        unordered_map<int,int>mp;
        func(root,mp,arr);
        int j;
        int max=0;
        int n=arr.size();
        for(j=0;j<n;j++){
            if(mp[arr[j]]>max){
                max=mp[arr[j]];
            }
        }
        vector<int>ans;
        for(j=0;j<n;j++){
            if(mp[arr[j]]==max){
                ans.push_back(arr[j]);
            }
        }
        return ans;
    }
};