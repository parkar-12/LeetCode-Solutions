/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
    queue<TreeNode *>q;
    q.push(root);
    q.push(NULL);
    int count=0;
    int flagx=0;
    int flagy=0; 
    vector<int>arr;
    if(root==NULL){
        return false;
    }
    while(!q.empty()){
        TreeNode*temp=q.front();
        q.pop();
        if(temp==NULL){
            if(!q.empty()){
                q.push(NULL);
            }
            if(flagx==1&&flagy==1){
                return true;
            }
            if(flagx==1||flagy==1){
                return false;
            }
        }
        else{
            if(temp->val==x){
                flagx=1;
            }
            if(temp->val==y){
                flagy=1;
            }
            if(temp->left!=NULL&&temp->right!=NULL){
                int l=temp->left->val;
                int r=temp->right->val;
                if((l==x&&y==r)||(l==y&&x==r)){
                    return false;
                }
            }
            if(temp->left!=NULL){
                q.push(temp->left);
            }
            if(temp->right!=NULL){
                q.push(temp->right);
            }
            
        }
    }
    return false;
    }
};