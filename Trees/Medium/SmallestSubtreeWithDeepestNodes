/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int func(TreeNode *root,TreeNode *&ans,int h,int &maxi){
    if(root==NULL){
        return 0;
    }
    if(root->left==NULL&&root->right==NULL){
        if(h>=maxi){
            maxi=h;
            ans=root;
        }
        return h;
    }
    int l=func(root->left,ans,h+1,maxi);
    int r=func(root->right,ans,h+1,maxi);
    if(l==r&&l==maxi){
        ans=root;
        return l;
    }
    return max(l,r);
}

class Solution {
public:
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(root==NULL){
            return root;
        }
        TreeNode *ans=NULL;
        int maxi=0;
        func(root,ans,0,maxi);
        return ans;
    }
};