/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
pair<int,int> func(TreeNode *root,int &ans){
    if(root==NULL){
        return make_pair(-1,-1);
    }
    if(root->left==NULL&&root->right==NULL){
        return make_pair(root->val,root->val);
    }
    int maxi=root->val;
    int mini=root->val;
    pair<int,int>l=func(root->left,ans);
    pair<int,int>r=func(root->right,ans);
    if(l.first!=-1&&l.second!=-1){
        ans=max(ans,abs(l.first-root->val));
        ans=max(ans,abs(l.second-root->val));
        if(l.first>maxi){
            maxi=l.first;
        }
        if(l.second<mini){
            mini=l.second;
        }
    }
    if(r.first!=-1&&r.second!=-1){
        ans=max(ans,abs(r.first-root->val));
        ans=max(ans,abs(r.second-root->val));
        if(r.first>maxi){
            maxi=r.first;
        }
        if(r.second<mini){
            mini=r.second;
        }
    }
    return make_pair(maxi,mini);
}
class Solution {
public:
    int maxAncestorDiff(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        pair<int,int>temp;
        int ans=INT_MIN;
        temp=func(root,ans);
        return ans;
    }
};