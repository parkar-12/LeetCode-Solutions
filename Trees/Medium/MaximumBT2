/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int findMax(vector<int>&arr,int start,int end){
    int j;
    int max=INT_MIN;
    int index;
    for(j=start;j<=end;j++){
        if(arr[j]>max){
            max=arr[j];
            index=j;
        }
    }
    return index;
}

TreeNode *func(vector<int>&arr,int start,int end){
  //  cout<<start<<" "<<end<<"\n";
    if(start>end){
        return NULL;
    }
   // cout<<start<<" "<<end<<"\n";
    struct TreeNode *root=new TreeNode();
    root->left=NULL;
    root->right=NULL;
    if(start==end){
        root->val=arr[start];
        root->left=NULL;
        root->right=NULL;
        return root;
    }
    int index=findMax(arr,start,end);
    root->val=arr[index];
    root->left=func(arr,start,index-1);
    root->right=func(arr,index+1,end);
    return root;
}

void inorder(TreeNode *root,vector<int>&arr){
    if(root==NULL){
        return ;
    }
    inorder(root->left,arr);
    arr.push_back(root->val);
    inorder(root->right,arr);
}
class Solution {
public:
    TreeNode* insertIntoMaxTree(TreeNode* root, int val) {
        vector<int>arr;
        inorder(root,arr);
        arr.push_back(val);
        int n=arr.size();
        TreeNode* ans=func(arr,0,n-1);
        return ans ;
    }
};