/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
TreeNode *find(TreeNode *root,int x){
    if(root==NULL){
        return root;
    }
    if(root->val==x){
        return root;
    }
    TreeNode *left=find(root->left,x);
    TreeNode *right=find(root->right,x);
    if(left!=NULL){
        return left;
    }
    return right;
}
int count(TreeNode *root){
    if(root==NULL){
        return 0;
    }
    if(root->left==NULL&&root->right==NULL){
        return 1;
    }
    int left=count(root->left);
    int right=count(root->right);
    return left+right+1;
}
class Solution {
public:
    bool btreeGameWinningMove(TreeNode* root, int n, int x) {
        if(root==NULL){
            return false;
        }
        TreeNode *node=find(root,x);
        int l=count(node->left);
        int r=count(node->right);
        if(l>n/2||r>n/2){
            return true;
        }
        if(l+r+1<n-(l+r+1)){
            return true;
        }
        return false;
    }
};