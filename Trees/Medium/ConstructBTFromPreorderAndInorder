/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int find(vector<int>&inorder,int start,int end,int val){
    int j;
    int index=-1;
    for(j=start;j<=end;j++){
        if(inorder[j]==val){
            index=j;
            break;
        }
    }
    return index;
}
    
TreeNode *func(vector<int>& preorder, vector<int>& inorder,int start,int end,int &index){
    if(index==preorder.size()){
        return NULL;
    }
    int val=preorder[index];
    TreeNode *root=new TreeNode(val);
    int i=find(inorder,start,end,val);
    if(i==-1){
        return NULL;
    }
    index++;
    root->left=func(preorder,inorder,start,i-1,index);
    root->right=func(preorder,inorder,i+1,end,index);
    return root;
}    
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size()==0){
            return NULL;
        }
        int index=0;
        int n=preorder.size();
        return func(preorder,inorder,0,n-1,index);
    }
};