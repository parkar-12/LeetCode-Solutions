/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
void inorder(TreeNode *root,vector<int>&arr){
    if(root==NULL){
        return;
    }
    inorder(root->left,arr);
    arr.push_back(root->val);
    inorder(root->right,arr);
}
class Solution {
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        cout.tie(NULL);
        vector<int>arr;
        vector<int>brr;
        inorder(root1,arr);
        inorder(root2,brr);
        int n=arr.size();
        int m=brr.size();
        int j,k;
        j=0;
        k=0;
        vector<int>ans;
        while(j<n&&k<m){
            if(arr[j]<brr[k]){
                ans.push_back(arr[j]);
                j++;
            }
            else{
                ans.push_back(brr[k]);
                k++;
            }
        }
        while(j<n){
            ans.push_back(arr[j]);
            j++;
            
        }
        while(k<m){
            ans.push_back(brr[k]);
            k++;
        }
        return ans; 
    }
};