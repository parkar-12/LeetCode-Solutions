/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        if(preorder.size()==0){
            return NULL;
        }
        stack<TreeNode *>st;
        int j;
        TreeNode *current;
        TreeNode *root;
        int flag=0;
        for(j=0;j<preorder.size();j++){
            TreeNode *temp=new TreeNode(preorder[j]);
            if(flag==0){
                root=temp;
                flag=1;
            }
            if(st.empty()){
                st.push(temp);
            }
            else{
                if(preorder[j]<st.top()->val){
                    st.top()->left=temp;
                }
                else{
                    while(!st.empty()&&st.top()->val<preorder[j]){
                        current=st.top();
                        st.pop();
                    }
                    current->right=temp;
                }
                st.push(temp);
            }
       //     inorder(root);
       //     cout<<"\n";
        };
        return root;
    }
};