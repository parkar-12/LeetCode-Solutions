/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

void inorder(TreeNode *root){
    if(root==NULL){
        return ;
    }
    inorder(root->left);
    cout<<root->val<<" ";
    inorder(root->right);
}
int findmax(vector<int>&nums,int start,int end){
    int ans=-1;
    int j;
    int index;
    for(j=start;j<=end;j++){
        if(nums[j]>ans){
            ans=nums[j];
            index=j;
        }
    }
    return index;
}
TreeNode *func(vector<int>&nums,int start,int end){
    if(start>end){
        return NULL;
    }
    if(start==end){
        TreeNode *root=new TreeNode(nums[start]);
        return root;
    }
    int index=findmax(nums,start,end);
 //   cout<<index<<"\n";
    TreeNode *root=new TreeNode(nums[index]);
    root->left=func(nums,start,index-1);
    root->right=func(nums,index+1,end);
    return root;
}
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.size()==0){
            return NULL;
        }
        int n=nums.size();
        TreeNode* ans=func(nums,0,n-1);
     //   inorder(ans);
        return ans ;
    }
};