/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        
        if(root==NULL){
            return 0;
        }
        queue<pair<TreeNode*,unsigned long long int>>q;
        q.push(make_pair(root,0));
        TreeNode *temp=NULL;
        q.push(make_pair(temp,0));
        unsigned long long int min=0;
        unsigned long long int max=0;
        unsigned long long int count=0;
        int flag=0;
        while(!q.empty()){
            pair<TreeNode*,unsigned long long int> temp=q.front();
            q.pop();
            if(temp.first==NULL){
                if(!q.empty()){
                    TreeNode *temp=NULL;
                    q.push(make_pair(temp,0));
                }
                unsigned long long int val=max-min+1;
           //     cout<<min<<" "<<max<<" "<<val<<"\n";
                if(count<val){
                    count=val;
                }
                flag=0;
            }
            else{
             //   cout<<"second "<<temp.second<<" "<<min<<" "<<max<<" "<<"\n";
                max=temp.second;
                if(flag==0){
                    min=temp.second;
                    flag=1;
                }
                if(temp.first->left!=NULL){
                    q.push(make_pair(temp.first->left,2*temp.second+1));
                }
                if(temp.first->right!=NULL){
                    q.push(make_pair(temp.first->right,2*temp.second+2));
                }    
            }    
        }
        return count;
    }
};