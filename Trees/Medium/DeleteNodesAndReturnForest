/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
TreeNode* func(TreeNode *root,unordered_map<int,int>mp,vector<TreeNode*>&ans){
    if(root==NULL){
        return root;
    }
    if(mp[root->val]>0){
        TreeNode *temp;
        if(root->left!=NULL){
            temp=func(root->left,mp,ans);
            if(temp!=NULL)
            ans.push_back(temp);
        }
        if(root->right!=NULL){
            temp=func(root->right,mp,ans);
            if(temp!=NULL)
            ans.push_back(temp);
        }
        return NULL;
    }
    root->left=func(root->left,mp,ans);
    root->right=func(root->right,mp,ans);
    return root;
}
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*>ans;
        if(root==NULL){
            return ans;
        }
        unordered_map<int,int>mp;
        int j;
        int n=to_delete.size();
        int flag=0;
        for(j=0;j<n;j++){
            mp[to_delete[j]]++;
        }
        TreeNode *temp=func(root,mp,ans);
        if(temp!=NULL)
        ans.push_back(temp);
        return ans;
    }
};