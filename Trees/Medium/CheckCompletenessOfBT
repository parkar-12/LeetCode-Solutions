/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int countNodes(TreeNode* root) {
        if(root==NULL)
            return 0;
        
        return 1 + countNodes(root->left) + countNodes(root->right);
    }
void func(TreeNode *root,long long int &count,long long int index,long long int &maxIndex,int total,int &flag){
    if(root==NULL){
        return;
    }
    if(index>total){
        flag=1;
        return;
    }
    count++;
    if(index>maxIndex){
        maxIndex=index;
    }
    func(root->left,count,2*index,maxIndex,total,flag);
    func(root->right,count,2*index+1,maxIndex,total,flag);
}
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if(root==NULL){
            return true;
        }
        long long int count=0;
        long long int maxIndex=0;
        int total=countNodes(root);
        int flag=0;
        func(root,count,1,maxIndex,total,flag);
        if(count==maxIndex&&flag==0){
            return true;
        }
        return false;
    }
};