/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int v, int d) {
        if(root==NULL){
            if(d==1){
                TreeNode *temp=new TreeNode(v);
                return temp;
            }
            else{
                return root;
            }
        }
        if(d==1){
            TreeNode *temp=new TreeNode(v);
            temp->left=root;
            return temp;
        }
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        int count=1;
        while(!q.empty()){
            TreeNode *temp=q.front();
            q.pop();
            if(temp==NULL){
                if(!q.empty()){
                    q.push(NULL);
                }
                count++;
                if(count==d){
                    break;
                }
            }
            else{
            if(count==d-1){
               TreeNode *newnode1=new TreeNode(v);
               TreeNode *newnode2=new TreeNode(v);
               TreeNode *l=temp->left;
               TreeNode *r=temp->right;
                temp->left=newnode1;
                newnode1->left=l;
                temp->right=newnode2;
                newnode2->right=r;
            }
            else{
                if(temp->left!=NULL){
                    q.push(temp->left);
                }
                if(temp->right!=NULL){
                    q.push(temp->right);
                }
            }
        }
        }
        return root;
    }
};