/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
pair<int,int> func(TreeNode *root,unordered_map<int,int>&mp,vector<int>&arr){
    if(root==NULL){
        return make_pair(0,-1);
    }
    if(root->left==NULL&&root->right==NULL){
        return make_pair(root->val,1);
    }
    pair<int,int> l=func(root->left,mp,arr);
    pair<int,int> r=func(root->right,mp,arr);
    int sum=root->val;;
    if(l.second!=-1){
        mp[l.first]++;
        if(mp[l.first]==1){
            arr.push_back(l.first);
        }
        sum=sum+l.first;
    }
    if(r.second!=-1){
        mp[r.first]++;
        if(mp[r.first]==1){
            arr.push_back(r.first);
        }
        sum=sum+r.first;
    }
    return make_pair(sum,1);
}
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int>arr;
        if(root==NULL){
            return arr;
        }
        unordered_map<int,int>mp;
        pair<int,int>temp=func(root,mp,arr);
        mp[temp.first]++;
        if(mp[temp.first]==1){
            arr.push_back(temp.first);
        }
        int max=0;
        vector<int>ans;
        int j;
        for(j=0;j<arr.size();j++){
            if(mp[arr[j]]>max){
                max=mp[arr[j]];
            }
        }
        for(j=0;j<arr.size();j++){
            if(mp[arr[j]]==max){
                ans.push_back(arr[j]);
            }
        }
        return ans;
    }
};