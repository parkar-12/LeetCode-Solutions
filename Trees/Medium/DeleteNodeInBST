/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

int find(TreeNode *root){
    while(root->left!=NULL){
        root=root->left;
    }
    return root->val;
}

TreeNode * func(TreeNode *root,int key){
    if(root==NULL){
        return NULL;
    }
    if(root->val>key){
        root->left=func(root->left,key);
    }
    else if(root->val<key){
        root->right=func(root->right,key);
    }
    else{
        if(root->left==NULL&&root->right==NULL){
            return NULL;
        }
        if(root->left==NULL){
            return root->right;
        }
        if(root->right==NULL){
            return root->left;
        }
        int val=find(root->right);
        root->val=val;
        root->right=func(root->right,val);
    }
    return root;
}
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        return func(root,key);
    }
};