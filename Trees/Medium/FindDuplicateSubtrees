/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

string func(TreeNode *root,unordered_map<string,int>&mp,vector<TreeNode *>&ans){
    if(root==NULL){
        return "";
    }
    string temp="(";
    temp=temp+func(root->left,mp,ans);
    temp=temp+to_string(root->val);
    temp=temp+func(root->right,mp,ans);
    temp=temp+")";
    if(mp[temp]==1){
        cout<<temp<<"\n";
        ans.push_back(root);
    }
    mp[temp]++;
    return temp;
}

class Solution {
public:
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode*>ans;
        if(root==NULL){
            return ans;
        }
        unordered_map<string,int>mp;
        func(root,mp,ans);
        return ans;
    }
};