/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool check(TreeNode* root , ListNode* head){
        if(head==NULL){return true ;}
        if(root==NULL)return false ;
        if(head->val== root->val){
            bool res1 = check(root->left , head->next) ; 
            bool res2 = check(root->right, head->next) ; 
            return res1|| res2 ; 
        }
        
        else return false; 
    }
    
class Solution {
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        if(root==NULL)return false ;
        if(root->val == head->val ){
            bool res1 = check(root->left , head->next) ; 
            bool res2 = check(root->right , head->next) ;
           if(res1||res2){
               return true ;
           }
        }
        
        bool res1 = isSubPath(head , root->left) ;
        bool res2 = isSubPath(head , root->right) ; 
        return res1||res2 ;
        
        
    }
};