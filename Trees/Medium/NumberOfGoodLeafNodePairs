/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
vector<int>func(TreeNode *root,int d,int &count){
    if(root==NULL){
        vector<int>arr;
        return arr;
    }
    if(root->left==NULL&&root->right==NULL){
        vector<int>arr;
        arr.push_back(1);
        return arr;
    }
    vector<int>l=func(root->left,d,count);
    vector<int>r=func(root->right,d,count);
    if(l.size()>0&&r.size()>0){
        int j,k;
        for(j=0;j<l.size();j++){
            for(k=0;k<r.size();k++){
                if(l[j]+r[k]<=d){
                    count++;
                }
            }
        }
    }
    vector<int>arr;
    int j;
    for(j=0;j<l.size();j++){
        arr.push_back(l[j]+1);
    }
    for(j=0;j<r.size();j++){
        arr.push_back(r[j]+1);
    }
    return arr;
}
class Solution {
public:
    int countPairs(TreeNode* root, int distance) {
        if(root==NULL){
            return 0;
        }
        int count=0;
        func(root,distance,count);
        return count;
    }
};