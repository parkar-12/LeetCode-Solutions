void dfs(vector<vector<char>> &grid,int i,int j,int n,int m){
    grid[i][j]='0';
    if(i+1<n&&grid[i+1][j]=='1'){
        dfs(grid,i+1,j,n,m);
    }
    if(i-1>=0&&grid[i-1][j]=='1'){
        dfs(grid,i-1,j,n,m);
    }
    if(j+1<m&&grid[i][j+1]=='1'){
        dfs(grid,i,j+1,n,m);
    }
    if(j-1>=0&&grid[i][j-1]=='1'){
        dfs(grid,i,j-1,n,m);
    }
    return;
}

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int count=0;
        int n=grid.size();
        if(n==0){
            return 0;
        }
        int m=grid[0].size();
        int j,k;
        for(j=0;j<n;j++){
            for(k=0;k<m;k++){
                if(grid[j][k]=='1'){
                    dfs(grid,j,k,n,m);
                    count++;
                }
            }
        }
        return count;
    }
};